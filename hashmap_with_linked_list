from linked_list import Node, LinkedList
from blossom_lib import flower_definitions 

class HashMap:
  def __init__(self, size):
    self.array_size = size
    self.array = [LinkedList() for item in range(self.array_size)]
    
  def print_array(self):
    #for linked_list in self.array:
      #print(linked_list)
    # print("Print array method: {}".format(self.array))
    return self.array

  def hash(self, key):
    # print("Hash Method: {}".format(sum(key.encode())))
    return sum(key.encode())
  
  def compress(self, hash_code):
    # print("Compress method: {}".format(hash_code % self.array_size))
    return hash_code % self.array_size

  def assign(self, key, value):
    array_index = self.compress(self.hash(key))
    # self.array[array_index] = [key, value]
    payload = Node([key, value])
    list_at_array = self.array[array_index]
    for item in list_at_array:
      if item[0] == key:
        item[1] = value
    list_at_array.insert(payload)

  def retrieve(self, key):
    array_index = self.compress(self.hash(key))
    # payload = self.array[array_index]
    list_at_index = self.array[array_index]
    # print("Retrieve Method: {}".format(list_at_index))
    for item in list_at_index:
      if item is not None:
        if item[0] == key:
          return item[1]
        else:
          return None
      else:
        return None

blossom = HashMap(len(flower_definitions))
for flower in flower_definitions:
  print(flower)
  blossom.assign(flower[0], flower[1])
#blossom.print_array()
print(blossom.retrieve("daisy"))










